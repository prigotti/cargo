package application

import (
	"context"

	"github.com/mitchellh/mapstructure"
	"github.com/prigotti/cargo/common/pb"
	"google.golang.org/grpc"
)

const (
	DefaultPage    = 0
	DefaultPerPage = 10
)

// PortService is the application service responsible for sending
// and retrieving Port data to the Port domain microservice.
type PortService interface {
	StreamCreateOrUpdate(ctx context.Context, data <-chan map[string]interface{}, stop <-chan struct{}) error
	List(ctx context.Context, q *pb.ListQuery) (*pb.PortListData, error)
}

// Holding the client directly is made for simplicity, as the
// implementation could be at the infrastructure layer and made
// available with a gateway interface.
type portService struct {
	c pb.PortServiceClient
}

// NewPortService is the PortService factory.
func NewPortService(c *grpc.ClientConn) PortService {
	client := pb.NewPortServiceClient(c)

	return &portService{c: client}
}

// StreamCreateOrUpdate streams Port data to the gRPC server that
// it receives from the data channel, which receives generic
// map[string]interface{} and converts it to a Port generated
// with protocol buffers.
func (s *portService) StreamCreateOrUpdate(
	ctx context.Context,
	data <-chan map[string]interface{},
	stop <-chan struct{},
) error {
	stream, err := s.c.CreateOrUpdateStream(ctx)
	if err != nil {
		return err
	}

L:
	for {
		select {
		case <-ctx.Done():
			return nil
		case <-stop: // Signals that there's no more data to be sent
			break L
		case d := <-data:
			port := &pb.Port{}
			mapstructure.Decode(d, port)
			err = stream.Send(port)
			if err != nil {
				return err
			}
		}
	}

	_, err = stream.CloseAndRecv()
	if err != nil {
		return err
	}

	return nil
}

// List retrieves Port from the Port domain microservice.
// As the data can be quite large, pagination is employed
// with the ListQuery request generated by protocol buffers.
func (s *portService) List(ctx context.Context, q *pb.ListQuery) (*pb.PortListData, error) {
	data, err := s.c.List(ctx, q)
	if err != nil {
		return nil, err
	}

	return data, nil
}
